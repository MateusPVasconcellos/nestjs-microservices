version: "3"
networks:
  loki:
services:
  loki:
    image: grafana/loki:2.4.0
    container_name: loki
    volumes:
      - ./loki:/etc/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.4.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./promtail:/etc/promtail
    # ports:
    #   - "1514:1514" # this is only needed if you are going to send syslogs
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - loki

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    user: "1000"
    volumes:
      - .docker/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - loki

  krakend:
    # The :watch image restarts the service automatically when the configuration files change.
    # Do not use this image in production, it's meant to speed up your testing and development.
    image: devopsfaith/krakend:watch
    container_name: krakend
    volumes:
      - ./krakend:/etc/krakend
    ports:
      - "1234:1234"
      - "8080:8080"
      - "8090:8090"
    command: [ "run", "-d", "-c", "/etc/krakend/krakend.json" ]

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
  
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"   # Porta padrão do RabbitMQ para AMQP
      - "15672:15672" # Porta padrão para o painel de gerenciamento do RabbitMQ
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - .docker/rabbitmq_data:/var/lib/rabbitmq
      - .docker/rabbitmq_logs:/var/log/rabbitmq

  auth:
    build:
      context: auth
    ports:
      - "8000:8000"
  user:
    build:
      context: user
    ports:
      - "8010:8010"
  event:
    build:
      context: event
    ports:
      - "8020:8020"
  mailer:
    build:
      context: mailer
    ports:
      - "8030:8030"

  auth-db:
    image: postgres:14
    container_name: auth-db
    restart: always
    tty: true
    ports:
      - "5434:5432"
    volumes:
      - .docker/auth/dbdata:/var/lib/postgresql/data:z
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: auth-db

  user-db:
    image: postgres:14
    container_name: user-db
    restart: always
    tty: true
    ports:
      - "5433:5432"
    volumes:
      - .docker/user/dbdata:/var/lib/postgresql/data:z
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: user-db

  event-db:
    image: postgres:14
    container_name: event-db
    restart: always
    tty: true
    ports:
      - "5435:5432"
    volumes:
      - .docker/event/dbdata:/var/lib/postgresql/data:z
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: event-db
